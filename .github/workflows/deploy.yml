name: Deploy Strapi on ECS

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve \
          -var="docker_image=145065858967.dkr.ecr.ap-south-1.amazonaws.com/adarshm/strapi6" \
          -var="vpc_id=vpc-01b35def73b166fdc" \
          -var='subnet_ids=["subnet-0393e7c5b435bd5b6","subnet-03e1b3fe2ad999849","subnet-05e9035d969355719"]' \
          -var="ecs_execution_role_arn=arn:aws:iam::145065858967:role/ecsTaskExecutionRole"

      # ✅ Register new ECS Task Definition with latest image
      - name: Register ECS Task Definition
        id: taskdef
        run: |
          sed "s|<IMAGE>|145065858967.dkr.ecr.ap-south-1.amazonaws.com/adarshm/strapi6:latest|g" ecs-task-def.json > ecs-task-def-final.json
          aws ecs register-task-definition --cli-input-json file://ecs-task-def-final.json > taskdef.json
          echo "TASK_DEF_ARN=$(jq -r '.taskDefinition.taskDefinitionArn' taskdef.json)" >> $GITHUB_ENV

      # ✅ Trigger CodeDeploy for Blue/Green deployment
      - name: Create CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name strapi-codedeploy-app-mayank \
            --deployment-group-name strapi-deploy-group-mayank \
            --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
            --github-location repository=${{ github.repository }},commitId=${{ github.sha }} \
            --revision revisionType=AppSpecContent,appSpecContent="{\"content\":\"$(cat appspec.yaml | base64 | tr -d '\n')\"}"